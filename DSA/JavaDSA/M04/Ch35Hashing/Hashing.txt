Hashing 
-- Map
-- Set 



Map 
-- HashMap
-- LinkedHashMap 
-- TreeMap 

Set 
-- HashSet 
-- LinkedHashSet 
-- TreeSet 



Map {

    key can be 
    -- Character
    -- Integer
    -- String
    -- Float
    -- Double
    -- Boolean

    value can be 
    -- Character
    -- Integer
    -- String
    -- Float
    -- Double
    -- Boolean


    01. HashMap {
        -- import.java.util.HashMap
        -- HashMap < key, value> hm = new HashMap<>();

        methods
        -- put(key, value)
        -- get(key)
        -- containsKey(key)
        -- remove(key)
        -- size()
        -- isEmpty()
        -- clear()
    }


    02. LinkedHashMap {
        -- import.java.util.LinkedHashMap
        -- LinkedHashMap < key, value> lhm = new LinkedHashMap<>();

        methods
        -- put(key, value)
        -- get(key)
        -- containsKey(key)
        -- remove(key)
        -- size()
        -- isEmpty()
        -- clear()
    }


    03. TreeMap {
        -- import.java.util.TreeMap
        -- TreeMap <key, value> tm = new TreeMap <>();

        methods
        -- put(key, value)
        -- get(key)
        -- containsKey(key)
        -- remove(key)
        -- size()
        -- isEmpty()
        -- clear()
    }


    04. HashMap vs LinkedHashMap vs TreeMap
    -- HashMap = random fashion 
    -- LinkedHashMap = according to insertion of keys 
    -- TreeMap = according to ascending order of keys 

    05. 
    -- Map < key, value > m = new HashMap <>();
    -- Map < key, value > m = new LinkedHashMap <>();
    -- Map < key, value > m = new TreeMap <>();

    06. some more 
    -- get(key)
    -- getOrDefault(key, defaultValue);
    -- entrySet() = set of value + key 
    -- keySet()   = set of key 
    -- values()   = array of value 
    -- 

}






Set {

    elememt can be 
    -- Character
    -- Integer
    -- String
    -- Float
    -- Double
    -- Boolean

    01. HashSet {
        -- import.java.util.HashSet 
        -- HashSet  <elememt> hs = new HashSet<>();

        methods
        -- add(elememt)
        -- contains(elememt)
        -- remove(elememt)
        -- size()
        -- isEmpty()
        -- clear()
    }


    02. LinkedHashSet {
        -- import.java.util.LinkedHashSet 
        -- LinkedHashSet  <elememt> lhs = new LinkedHashSet<>();

        methods
        -- add(elememt)
        -- contains(elememt)
        -- remove(elememt)
        -- size()
        -- isEmpty()
        -- clear()
    }


    03. TreeSet {
        -- import.java.util.TreeSet 
        -- TreeSet  <elememt> ts = new TreeSet<>();

        methods
        -- add(elememt)
        -- contains(elememt)
        -- remove(elememt)
        -- size()
        -- isEmpty()
        -- clear()
    }


    04. HashSet vs LinkedHashSet vs TreeSet
    -- HashSet = random fashion 
    -- LinkedHashSet = according to insertion of elememt
    -- TreeSet = according to ascending order of elememt

    05. 
    -- Set < elememt > s = new HashSet <>();
    -- Set < elememt > s = new LinkedHashSet <>();
    -- Set < elememt > s = new TreeSet <>();

}







difference {

    01. set vs HashSet
    --- set is an iterface 
    --- HashSet is a class
    --- HashSet is used to implement set  
 

    02. map vs HashMap 
    -- 

}