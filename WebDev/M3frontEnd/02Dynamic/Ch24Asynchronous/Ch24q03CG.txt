

1. What is the Fetch API and how does it differ from traditional XMLHttpRequest?
2. How do you make a GET request using the Fetch API? Provide an example.
3. Explain the concept of a "CORS" error in the context of Fetch API. How can you handle it?
4. How do you send data in the body of a POST request using the Fetch API?
5. Describe how you can use the Fetch API to upload a file.


6. What is a callback function and why is it commonly used in asynchronous programming?
7. How do you avoid callback hell or the "Pyramid of Doom" when dealing with multiple nested callbacks?
8. Provide an example of a situation where you would use a callback function in JavaScript.


9. Explain what a Promise is in JavaScript and why it was introduced.
10. How do you create a new Promise? Provide a basic structure.
11. How do you handle the results of a resolved or rejected Promise?
12. What is Promise chaining? Give an example of how you can chain multiple asynchronous operations using Promises.
13. Describe the purpose and usage of `Promise.all` and `Promise.race`.


14. What is the purpose of the `async` keyword in a function declaration?
15. How do you use the `await` keyword? How does it improve the readability of asynchronous code?
16. Explain how error handling works with `async/await` using `try` and `catch`.


17. Provide an example of how you can perform sequential asynchronous operations using Promise chaining.


18. What is throttling and debouncing in the context of user interactions? How do they improve performance?

19. Provide an example scenario where you would use throttling and another where you would use debouncing.


20. What is the WebSocket API and how does it differ from HTTP communication?
21. Describe a real-world scenario where using WebSocket would be more appropriate than traditional HTTP polling.


22. What is JSONP (JSON with Padding)? How does it work, and why is it used?
23. Explain the potential security risks associated with using JSONP and how to mitigate them.


24. What is Cross-Origin Resource Sharing (CORS)? Why is it necessary, and how does it prevent security vulnerabilities?
25. How can you enable CORS on the server-side? Provide an example of allowing specific origins.
















**1. What is the Fetch API and how does it differ from traditional XMLHttpRequest?**

---- The Fetch API is a modern way to make network requests in JavaScript. It provides a more streamlined and flexible approach compared to the older XMLHttpRequest. Unlike XMLHttpRequest, Fetch API uses Promises for handling asynchronous operations, making it more readable and easier to work with.










**2. How do you make a GET request using the Fetch API? Provide an example.**

---- We can use the `fetch()` function to make a GET request. Here's an example:

```javascript
fetch('https://api.example.com/data')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));
```









**3. Explain the concept of a "CORS" error in the context of Fetch API. How can you handle it?**

---- CORS (Cross-Origin Resource Sharing) is a security mechanism that restricts web pages from making requests to a different domain than the one that served the web page. If the server's response doesn't include the appropriate CORS headers, a CORS error occurs. To handle it, the server should be configured to include the necessary headers (`Access-Control-Allow-Origin` and others) to allow specific origins to access its resources.








**4. How do you send data in the body of a POST request using the Fetch API?**

---- To send data in the body of a POST request using Fetch API, you can provide the `method` as `'POST'` and include the data in the `body` property. Here's an example:

```javascript
fetch('https://api.example.com/submit', {
  method: 'POST',
  body: JSON.stringify({ key: 'value' }),
  headers: { 'Content-Type': 'application/json' }
});
```








**5. Describe how you can use the Fetch API to upload a file.**

---- For file uploads using Fetch API, you can create a `FormData` object to hold the file data and send it in a POST request. Here's an example:

```javascript
const formData = new FormData();
formData.append('file', fileInput.files[0]);

fetch('https://api.example.com/upload', {
  method: 'POST',
  body: formData
});
```








**6. What is a callback function and why is it commonly used in asynchronous programming?**

---- A callback function is a function that is passed as an argument to another function and is executed at a later point in time, often after an asynchronous operation completes. Callbacks are used to ensure that certain code runs only after a specific task is finished, making them essential for handling asynchronous operations.










**7. How do you avoid callback hell or the "Pyramid of Doom" when dealing with multiple nested callbacks?**

---- To avoid callback hell, you can use techniques like modularization, using named functions, or adopting Promises. Promises provide a more structured way to handle asynchronous operations, allowing you to chain operations and handle errors more cleanly.












**8. Provide an example of a situation where you would use a callback function in JavaScript.**

--- Here's an example where a callback function is used to handle the result of an asynchronous operation:

```javascript
function fetchData(url, callback) {
  fetch(url)
    .then(response => response.json())
    .then(data => callback(data))
    .catch(error => console.error('Error:', error));
}

fetchData('https://api.example.com/data', data => {
  console.log(data);
});
```








**9. Explain what a Promise is in JavaScript and why it was introduced.**

--- A Promise in JavaScript is an object that represents a value that might be available now, in the future, or never. It was introduced to provide a more structured and manageable way to handle asynchronous operations. Promises help avoid callback hell and make asynchronous code more readable and maintainable.









**10. How do you create a new Promise? Provide a basic structure.**

---- You can create a new Promise using the `Promise` constructor, passing in a function that takes two arguments: `resolve` and `reject`. Here's an example:

```javascript
const myPromise = new Promise((resolve, reject) => {
  // Perform asynchronous operation
  if (/* operation successful */) {
    resolve('Success');
  } else {
    reject('Error');
  }
});
```









**11. How do you handle the results of a resolved or rejected Promise?**

---- You can use the `.then()` method to handle a resolved Promise and the `.catch()` method to handle a rejected Promise. Here's an example:

```javascript
myPromise
  .then(result => console.log(result))
  .catch(error => console.error(error));
```







**12. What is Promise chaining? Give an example of how you can chain multiple asynchronous operations using Promises.**

---- Promise chaining is a technique where you perform multiple asynchronous operations in sequence, one after the other. Each `.then()` callback returns a new Promise, allowing you to chain operations. Here's an example:

```javascript
fetch('https://api.example.com/data')
  .then(response => response.json())
  .then(data => fetch(`https://api.example.com/details/${data.id}`))
  .then(detailsResponse => detailsResponse.json())
  .then(detailsData => console.log(detailsData))
  .catch(error => console.error('Error:', error));
```








**13. Describe the purpose and usage of `Promise.all` and `Promise.race`.**

- `Promise.all`: This method takes an array of Promises and returns a Promise that resolves with an array of results when all the input Promises are resolved. If any Promise is rejected, the entire Promise.all operation is rejected.
- `Promise.race`: This method takes an array of Promises and returns a Promise that resolves or rejects as soon as the first Promise in the input array resolves or rejects.









**14. What is the purpose of the `async` keyword in a function declaration?**

The `async` keyword is used to define an asynchronous function. An asynchronous function returns a Promise, and within its body, you can use the `await` keyword to pause the execution until a Promise is resolved.







**15. How do you use the `await` keyword? How does it improve the readability of asynchronous code?**

---- You use the `await` keyword within an `async` function to pause the execution of the function until a Promise is resolved. It makes asynchronous code look more synchronous and readable, as it eliminates the need for explicit `.then()` callbacks.







**16. Explain how error handling works with `async/await` using `try` and `catch`.**

--- You can handle errors in `async/await` code using `try` and `catch` blocks. If an error occurs within the `try` block, the execution jumps to the corresponding `catch` block. This provides a structured way to handle both synchronous and asynchronous errors within an `async` function.









**17. Provide an example of how you can perform sequential asynchronous operations using Promise chaining.**

--- Here's an example of fetching data and then fetching additional details using Promise chaining:

```javascript
fetch('https://api.example.com/data')
  .then(response => response.json())
  .then(data => fetch(`https://api.example.com/details/${data.id}`))
  .then(detailsResponse => detailsResponse.json())
  .then(detailsData => console.log(detailsData))
  .catch(error => console.error('Error:', error));
```












**18. What is throttling and debouncing in the context of user interactions? How do they improve performance?**

--- Throttling and debouncing are techniques used to control the frequency of function invocations triggered by rapid user interactions. Throttling limits the rate at which a function is executed, while debouncing ensures that a function is called only after a certain delay has passed since the last invocation. These techniques improve performance by preventing excessive function calls that could lead to unresponsiveness or unnecessary resource consumption.








**19. Provide an example scenario where you would use throttling and another where you would use debouncing.**

- Throttling Example:
  Use throttling for an event like scrolling, where you want to limit the frequency of a function call to prevent excessive processing and to maintain smooth scrolling performance.

- Debouncing Example:
  Use debouncing for a search input field, where you want to delay invoking a search function until the user stops typing for a short period. This prevents making multiple requests for every keystroke and provides more accurate search results.

---








**20. What is the WebSocket API and how does it differ from HTTP communication?**

---- The WebSocket API is a protocol that provides full-duplex communication channels over a single, long-lived connection. Unlike traditional HTTP communication, which is request-response based and stateless, WebSocket allows real-time, bidirectional communication between a client and a server. This makes it suitable for applications that require low-latency updates, such as real-time chats or live data feeds.








**21. Describe a real-world scenario where using WebSocket would be more appropriate than traditional HTTP polling.**

--- Consider a live multiplayer game where players' positions and actions need to be constantly updated. Using WebSocket, the game server can push updates to players in real time, eliminating the need for frequent HTTP polling and reducing the delay between updates.









**22. What is JSONP (JSON with Padding)? How does it work, and why is it used?**

--- JSONP is a technique for overcoming the same-origin policy limitation in web browsers. It involves making a request to a different domain by dynamically adding a `<script>` tag to the DOM. The response from the server is wrapped in a function call (padding) specified by the client. JSONP is used to fetch data from external APIs when CORS headers are not available, but it has security concerns due to potential vulnerabilities like cross-site scripting (XSS).









**23. Explain the potential security risks associated with using JSONP and how to mitigate them.**

--- JSONP can be vulnerable to XSS attacks because it executes arbitrary JavaScript code. To mitigate the risks, developers should:
- Sanitize and validate callback function names.
- Ensure that server-side responses are escaped properly to prevent script execution.
- Prefer other techniques like CORS when possible, as they provide better security controls.









**24. What is Cross-Origin Resource Sharing (CORS)? Why is it necessary, and how does it prevent security vulnerabilities?**

---- CORS is a security feature implemented by web browsers to restrict web pages from making requests to a different domain than the one that served the web page. It's necessary to prevent unauthorized cross-origin requests, which could expose sensitive data and lead to security vulnerabilities.











**25. How can you enable CORS on the server-side? Provide an example of allowing specific origins.**

--- You can enable CORS on the server by including specific HTTP headers in the response. For example, in Node.js using Express, you can use the `cors` middleware to allow specific origins:

```javascript
const express = require('express');
const cors = require('cors');

const app = express();

// Allow requests from example.com and example2.com
const allowedOrigins = ['http://example.com', 'http://example2.com'];
app.use(cors({
  origin: (origin, callback) => {
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  }
}));

// Other routes and middleware

app.listen(3000);
```




