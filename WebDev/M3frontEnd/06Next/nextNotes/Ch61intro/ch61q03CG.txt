


01. - What is the fundamental difference between React.js and Next.js?


02. - Can you explain the concept of a library versus a framework? How does it apply to React and Next.js?



03. - How does React.js handle state management, and why is it considered an advantage?


04. - What are components in React.js, and why are they considered building blocks of code?



05.  - What limitations does React.js have when it comes to routing, and how can you address this limitation?


06.  - Why is on-page SEO challenging in React.js applications?



07.  - Explain the performance improvements offered by Next.js, including SSR and SSG.


08.  - What are the key features of Next.js that make it attractive for building web applications?



09.  - Compare and contrast Client-Side Rendering (CSR) and Server-Side Rendering (SSR) in terms of performance and use cases.


10.  - What are the typical use cases for CSR, and when would you choose SSR?



11.   - Explain the difference between on-page SEO and off-page SEO.


12.   - How does Next.js help with crawling and indexing for SEO compared to traditional React applications?



13.  - Walk me through the steps to set up a Next.js project from scratch.


14.  - What is the purpose of each of the npm commands you mentioned during project setup?


15.  - Describe the difference between client components and server components in the context of Next.js.


16.  - When would you choose to use server components, and what scenarios are better suited for client components?



17.  - What is "Component Poisoning" in Next.js, and how can it be prevented?


18.  - Explain the concept of moving client components to the leaves and why it's a good practice.


19.  - How can you include server-only code in your Next.js application, and why might you want to do so?










