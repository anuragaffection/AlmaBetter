
Node js 
Multi page application 
Installation of  Node.js & NPM 
NPM 
YARN 
NPX 
Modules in Node js 
HTTP Modules
File system Module 
Path Module
OS Module




Node js {
    -- free and open source runtime environment 
    -- javascript can be used on server 
    -- javascript language for both backend & frontend 
    -- single threaded to handle multiple request 
    -- node js (use chrome v8 engine )
    -- event driven & non blocking 
}



Multi page application {
    -- MPA = Multi page  application
    -- SPA = sinlge page application


    Advantages of MPA
    -- excellent seo 
    -- excellent browser compatibility 
    -- simple to build 
    -- greater security than SPA

    Disadvantages of  MPA
    -- Time consuming due to server side loading 
    -- Reduce user experiece 
    -- did not work well on offline mode 
}



Installation of  Node.js & NPM {
    -- msi file 
    -- LTS version 

    Installed things 
    -- node.js runtime
    -- npm pakage manager 
    -- online doucemntation shortcut 
    -- add to path 

    Check
    -- node --version 
    -- node -v 
    -- npm --version 
    -- npm --v 
}



NPM {
    -- Node package manager

    command 
    -- npm install 
    -- npm install <pakage-name> 
    -- npm uninstall <package-name>
    -- npm update 

    package.json 
    -- default file after npm init 
    -- projects metadata 

    package.json field 
    -- name 
    -- version 
    -- description 
    -- main = entry point 
    -- dependencies 
    -- devDependencies 
    -- sripts = set of command 
}



YARN {
    -- it also node package manager 
    -- offline caching 
    -- parallel processing 
    -- improved CLI 
}



NPX  {
    -- npx execute code 
    -- npx released through npm 

    -- "cowsay" 
    -- npx cowsay "Hello"
    -- i have cowsay versio 1.0 in hp folder

    Creation of Node project 
    -- navigate to desired folder 
    -- npm init 
    -- npm install <package-name>
    -- node <entry-point-file>.js 
}



Modules in Node js {
    module 
    -- is a piece of code that can be reused across different applications

    Core Module
    -- by default comes with node js like 

    Local Modules
    -- during development we create like 

    Third party Modules
    -- have to install third party module using package manager 
    -- using modules or code created by other like 


    Core Modules
    -- fs 
    -- http 
    -- https 
    -- path 
    -- crypto 
    -- util 
    -- os 
    -- events 

    Local Modules
    -- myAdd 
    -- mySubstract

    Third party modules
    -- express.js 
    -- lodash 
    -- axios 
    -- moment.js 
    -- multer 
    
}


HTTP Modules {

    http & https 
    -- creating server 
    -- request to server 
    -- response handling 

    command
    -- http.createServer()
    -- setHeader()
    -- end()
    -- listen()

    Options & res ] example 01 server ]
    -- on 
    -- port 
    -- method 
    -- hostname
    -- path 

}




File system Module {

    fs 
    -- file system
    -- read 
    -- write 
    -- create directory


    commands
    -- fs.readFile()
    -- fs.writeFile()
    -- fs.mkdir()
    -- fs.writeFileSync()
    -- fs.readFileSync()


    Syntax 
    -- fs.readFile( 
        "<myFileName.txt" , 
        "<myCharaterEncodingType>" , 
        "<myCallbackFunction"
        );

    -- fs.writeFile( 
        "<myFileName.txt>" , 
        "<what to write>" , 
        "<myCallbackFunction>"
        );

    -- fs.mkdir( 
        "<myFolderName" , 
        "<myCallbackFunction" 
        );

}



Path Module {

    Normalizing path  

    Joining paths

    Resolvig a path 

}



OS Module {
    -- os.platform()
    -- os.release()
    -- os.type()
    -- os.hostname()
    -- os.arch()
    -- os.version()
    -- os.freemem
    -- os.homedir()
}





Activity {

    Acitvity: Agree or Disagree
    
    01. Node.js is primarily used for client-side scripting in web development.
    
    02. Node.js allows JavaScript to run on the server-side.
    
    03. In a Single-Page application, the entire content is loaded from the server each time a new page is requested.
    
    04. You can skip checking the version of NPM because it's not important.
    
    05. Package.json is used to manage dependencies and scripts for a Node.js project.
    
    06. Yarn is an alternative to NPM and cannot be used alongside it in the same project.
    
    Answers
    01. Disagree
    02. Agree
    03. Disagree
    04. Disagree
    05. Agree
    06. Agree
    
    
    

    
    Activity: Fill in the blanks
    
    01. NPX is commonly used for the ________(compilation / creation) of a Node project.
    
    02. Node.js ________(local / core) Modules are built-in modules that come with Node.js and provide essential functionality.
    
    03.  Node.js ________(local / third-party) Modules are modules created by developers for specific project needs and are not a part of the Node.js core.
    
    04. The ________(HTTP / TCP) Module in Node.js is used for building web servers and making HTTP requests.
    
    Answers
    01. Creation
    02. Core
    03. Third-Party
    04. HTTP Module


}





Notes {

    cosmos
    -- https://www.cosmos.so/

    XSS
    -- cross site scripting 

    CSRF
    -- Cross site request forgery 


}


Task {
    -- devDependencies vs dependencies
    -- HMAC algorithms 
}