
00:00 MongoDB {
    -- Databases
    -- collections
    -- documents
}




0:00 MongoDB {
    -- MongoDB
    -- Mongoose 
    -- Atlas 
    -- Compass
    -- 000webO
}




10:28 MongoDB feature {
    -- document oriented 
    -- NoSql db 
    -- json as read 
    -- bson as actual 
    -- unstructured data 
    -- semi structured data

    -- 10gen - MongoDB - Company 
    -- Humongous - very  big 
}




14:22 SQL vs NoSql {

    SQL
    -- relational
    -- table 
    -- structured
    -- strict  schema

    -- mySql
    -- postgre SQL
    -- oracle 


    NoSql
    -- non relational
    -- document
    -- unstructured
    -- semi structured
    -- schema less 

    -- MongoDB
    -- cassandra 
    -- Redis 

    Note
    -- Inside one collection, we can have multiple documents
}




22:06 MongoDB Terminologies {
    documents
    collections
    databases
}




25:20 Key Feature of  MongoDB




27:27 How MongoDB Works {
    MongoDB server

    Storage engine 
    -- convert  json to bson
    -- wired tiger 
    -- mmap v1
}




32:12 JSON vs BSON {

    JSON
    -- Easy to Read & write 

    BSON
    -- binary json 
    -- higher speed 
    -- more data type support 
    -- not easy to wirte & read 
    -- light weight 
}




35:15 installing MongoDB {
    -- community download server
    -- shell 
    -- database tools 
    -- command line tools
    -- atlas 
    -- Compass

    -- mongod --version 
    -- mongosh --version 
}



44:20 Managing database {
    -- show dbs 
    -- use <myDatabase_name> 
    -- db.dropDatabase()

    -- show collections 
    -- db.createCollection('<myCollection_name>');
    -- db.<myCollection_name>.drop()

    -- show dbs 
    -- show databases

    Note 
    -- You won't see a database listed in the output of the show dbs command until that datbase contains at least one collection with data in it
}




50:47 inserting operations {
    -- db.<myCollection_name>.insertOne({});
    -- db.<myCollection_name>.insertMany( [ {}, {}, {}, .... ])
    
    -- db.<myCollection_name>.find()
    -- db.<myCollection_name>.findOne()

    -- db.<myCollection_name>.find().limit()

    Note
    -- By default MongoDB add unique id to each document
}




56:29  use quotes when {
    -- special characters 
    -- start with numeric characters
    -- have spaces 
    -- have Reseved keywords from MongoDB
}




58:27 Ordered & unordered inset {
    -- by default insert is ordered 
    -- we can change the behaviour by adding flag 

    Note
    -- {ordered : false }
    -- add in the  last to change  the default behaviour
}



1:04:21 Case - sensitivity {
    -- collection name are case - sensitive 
    -- filed name are case - sensitive
}



1:06:29 Read operations {
    -- find()
    -- findOne()

}




1:09:02 ]]]importing json {

    syntax 
    -- mongoimport myJsonfile.json -d myDatabase_name -c myCollection_name --jsonArray

    Note
    -- jsonArray  accepts the import of data expresed with nultiple MongoDB documents within a single json array 

    example 
    -- mongoimport prouduct.json -d shop -c  prouducts
}






1:16:12 comparison operator {

    -- $eq = equal to
    -- $neq = not  equal to 

    -- $gt = greater than
    -- $gte = greater or equal to

    -- $lt = lesser than
    -- $lte = lesser or equal to

    -- $in = in 
    -- $nin  = not in  


    syntax
    -- db.<myCollection_name>.find( {'<myFieldName>' : {$<myOperator> : myValue} })

    example
    -- db.prouducts.find( { 'price' : { $eq : 699} });
}





1:22:21 introudction to cursors {
    
    cursor method 
    -- count()
    -- limit()
    -- skip()
    -- sort()

    Caveats 
    -- use skip() and sort() with cautions 
    -- indexing will be greate choice 

}




1:31:25 Logical operator {

    $and
    $or 
    $nor 
    $not 

    syntax $and 
    -- { $and : [ {condition 1},  {condition 2} ] }

    syntax $or 
    -- { $or : [ {condition 1},  {condition 2} ] }

    syntax $or 
    -- { $nor : [ {condition 1},  {condition 2} ] }

    syntax $not 
    -- { field : { $not : { operator : value } }  } 



    Questions 01 
    -- find product whose price  is greater than 100 and name equal to diamond ring 
    -- db.prouducts.find( { $and : [ {'price' : {$gt : 100}} , {'name': 'diamond ring'}]  } )


    note 
    -- by default passing multiple conditions treated as $and 

}







1.44.12 complex expressions {
    
    $expr 
    -- allow using aggregation expressions within a query 
    -- { $expr : { operator : [$field, value ] }}
}