

1. What are the key differences between relational and NoSQL databases?
2. When would you choose a relational database over a NoSQL database, and vice versa?
3. Explain the purpose of DDL in a database.
4. List some common DDL commands used in SQL.
5. How do you create a table using DDL?
6. What is the role of DML in a database system?
7. Provide examples of DML commands and their usage.
8. What is the significance of DCL in database management?
9. Explain the difference between GRANT and REVOKE commands in DCL.
10. What is the purpose of TCL in a database system?
11. How do COMMIT and ROLLBACK commands work in managing transactions?
12. Describe the three tiers of the 3-Tier architecture and their functions.
13. What are the advantages of using a 3-Tier architecture in web applications?
14. Compare and contrast Oracle Database, PostgreSQL, SQL Server, and MongoDB.
15. Explain the primary use cases for each of the mentioned database systems.
16. What is the role of Node.js and Express.js in backend development?
17. Compare Java with Python for backend development, considering Spring, Java Server Faces, Django, and Flask.
18. Discuss the key features and advantages of Amazon Web Services (AWS), Google Cloud Platform (GCP), Microsoft Azure, and Heroku.
19. When would you choose one cloud service over another for hosting your application?
20. Explain the differences between a relational database management system (RDBMS) and a NoSQL database.
21. Provide examples of when you would use an RDBMS and when you would opt for a NoSQL database.
22. What is a DBMS, and why is it essential for managing databases?
23. What is SQL, and how is it used in database management?
24. Define sharding and its role in database scaling.
25. Describe the main categories of data languages (DDL, DML, DCL, TCL) and their purposes.
26. Provide examples of DDL, DML, DCL, and TCL commands and their applications.
27. What is a database, and how does it differ from a data structure?
28. Explain the applications of databases in modern software systems.





1. Key Differences between Relational and NoSQL Databases:
   - Relational databases use a structured schema and tables with predefined relationships, 
   while NoSQL databases use flexible schemas, including document-based, key-value, column-family, and graph databases.
   - Relational databases are ACID compliant, ensuring data integrity, 
   while NoSQL databases may prioritize scalability and flexibility over strict consistency.



2. Choosing Relational or NoSQL Databases:
   - Choose a relational database when data has a well-defined structure and consistency is critical, such as in financial applications.
   - Opt for NoSQL databases when dealing with unstructured or semi-structured data, scalability is a priority, or you need to store and retrieve data quickly.



3. Purpose of DDL (Data Definition Language) in a Database:
   - DDL is used to define the structure of the database, including creating, altering, and deleting tables, defining constraints, and managing indexes.



4. Common DDL Commands in SQL:
   - Common DDL commands include 
   CREATE (for creating objects like tables, indexes, or views), 
   ALTER (for modifying objects), 
   DROP (for deleting objects), 
   TRUNCATE (for removing all records from a table), 
   COMMENT (for adding comments to objects), 
   RENAME (for renaming objects).



5. Creating a Table Using DDL:
   - To create a table using DDL, you use the CREATE TABLE command, specifying the table name, its columns, data types, and any constraints (e.g., primary keys or unique constraints).



6. Role of DML (Data Manipulation Language):
   - DML is responsible for manipulating data within a database, including operations like 
   INSERT (to add new data), 
   UPDATE (to modify existing data), 
   DELETE (to remove data), 
   MERGE (to combine data from multiple sources).



7. Examples of DML Commands and Their Usage:
   - INSERT: Used to add new records to a table. For example, `INSERT INTO Customers (Name, Email) VALUES ('John', 'john@email.com')`.
   - UPDATE: Modifies existing records. For example, `UPDATE Products SET Price = 29.99 WHERE ProductID = 123`.
   - DELETE: Removes records from a table. For example, `DELETE FROM Orders WHERE OrderID = 456`.



8. Significance of DCL (Data Control Language) in Database Management:
   - DCL is responsible for controlling permissions and access to database objects.
   - GRANT is used to provide specific privileges to users or roles, 
   while REVOKE is used to take those privileges away.



9. Difference Between GRANT and REVOKE Commands in DCL:
   - GRANT provides permissions to users or roles, allowing them to perform specific actions on database objects, such as SELECT, INSERT, or UPDATE.
   - REVOKE revokes previously granted permissions, restricting users or roles from performing those actions.



10. Purpose of TCL (Transaction Control Language) in a Database System:
    - TCL manages transactions in a database, ensuring data consistency and integrity during operations.
    - COMMIT is used to save changes made within a transaction, 
    while ROLLBACK is used to undo changes and return to a previous state in case of errors or failures.



11. How COMMIT and ROLLBACK Commands Work in Managing Transactions:
    - COMMIT saves the changes made during a transaction, making them permanent and ending the transaction.
    - ROLLBACK reverts the database to the state before the transaction began, discarding any changes made within the transaction.



12. Description of the Three Tiers in the 3-Tier Architecture:
    - The 3-Tier architecture consists of three tiers: Presentation, Application, and Database.
    - The Presentation tier handles the user interface and user interactions.
    - The Application tier contains business logic, processing requests from the Presentation tier.
    - The Database tier stores and manages data, providing data retrieval and storage capabilities.



13. Advantages of Using a 3-Tier Architecture in Web Applications:
    - Separation of concerns: It divides the application into manageable components, enhancing maintainability.
    - Scalability: Each tier can be scaled independently to handle load efficiently.
    - Security: Protects sensitive data by placing it in the Database tier, which is not directly accessible from the Presentation tier.



14. Comparison of Oracle Database, PostgreSQL, SQL Server, and MongoDB:
    - Oracle Database is known for its scalability, reliability, and strong ACID compliance.
    - PostgreSQL is open-source, highly extensible, and supports various data types.
    - SQL Server is Microsoft's RDBMS, suitable for Windows-based applications.
    - MongoDB is a NoSQL database designed for flexible, unstructured data storage.



15. Primary Use Cases for Oracle Database, PostgreSQL, SQL Server, and MongoDB:
    - Oracle is commonly used in enterprise applications, especially for large-scale data processing and financial systems.
    - PostgreSQL is suitable for web applications, data warehousing, and geospatial data.
    - SQL Server is preferred for Windows-based applications, such as those built on the Microsoft technology stack.
    - MongoDB is ideal for applications with flexible data models, real-time analytics, and content management systems.



16. Role of Node.js and Express.js in Backend Development:
    - Node.js allows developers to run JavaScript on the server, making it a popular choice for backend development.
    - Express.js is a web application framework for Node.js, simplifying the creation of web applications and APIs.



17. Comparison of Java with Python for Backend Development:
    - Java is known for its strong typing and platform independence, making it suitable for large-scale enterprise applications.
    - Python is known for its simplicity and readability, making it a popular choice for web development.
    - Spring is a Java framework for building enterprise applications.
    - Java Server Faces (JSF) is a Java web application framework.
    - Django and Flask are Python web frameworks for building web applications and APIs.



18. Key Features and Advantages of Amazon Web Services (AWS), Google Cloud Platform (GCP), Microsoft Azure, and Heroku:
    - AWS offers a wide range of cloud services, including computing, storage, and machine learning.
    - GCP provides advanced machine learning and data analytics capabilities.
    - Azure integrates seamlessly with Microsoft products and services.
    - Heroku simplifies application deployment and management.



19. When to Choose One Cloud Service Over Another for Hosting Your Application:
    - The choice depends on factors such as application requirements, existing infrastructure, cost, and familiarity with the platform. AWS, GCP, Azure, and Heroku have unique strengths for different use cases.



20. Differences Between a Relational Database Management System (RDBMS) and a NoSQL Database:
    - RDBMS uses structured tables with predefined schemas and is suitable for structured data with complex relationships.
    - NoSQL databases offer flexibility and scalability, making them ideal for unstructured or rapidly changing data.



21. Examples of When to Use an RDBMS and When to Choose a NoSQL Database:
    - Use an RDBMS for financial systems, inventory management, and applications with complex data relationships.
    - Opt for NoSQL databases for social media, sensor data, real-time analytics, and content management.



22. Role of a Database Management System (DBMS) and Why It's Essential for Managing Databases:
    - A DBMS is software that interacts with databases, managing data storage, retrieval, and ensuring data integrity.
    - DBMS enables data organization, access control, and transaction management, making it essential for efficient data management.



23. What SQL Is and How It Is Used in Database Management:
    - SQL (Structured Query Language) is a domain-specific language for managing relational databases.
    - It is used for tasks such as querying data, inserting, updating, and deleting records, and defining database schema.



24. Definition of Sharding and Its Role in Database Scaling:
    - Sharding is a database scaling technique that horizontally partitions data across multiple servers.
    - It enhances performance and accommodates large datasets by distributing data across shards.



25. Categories of Data Languages (DDL, DML, DCL, TCL) and Their Purposes:
    - DDL (Data Definition Language) defines the database structure.
    - DML (Data Manipulation Language) manages data operations.
    - DCL (Data Control Language) controls permissions.
    - TCL (Transaction Control Language) manages transaction-related commands.



26. Examples of DDL, DML, DCL, and TCL Commands and Their Applications:
    - DDL: CREATE TABLE, ALTER TABLE, DROP TABLE, TRUNCATE TABLE, and more.
    - DML: INSERT, UPDATE, DELETE, SELECT, and more.
    - DCL: GRANT, REVOKE.
    - TCL: COMMIT, ROLLBACK, SAVEPOINT, AUTOCOMMIT.



27. Definition of a Database and How It Differs from a Data Structure:
    - A database is a structured collection of data used for storing, organizing, and retrieving information.
    - A data structure is a way to organize and manipulate data in programming, while a database is a system for data storage and retrieval.



28. Applications of Databases in Modern Software Systems:
    - Databases are essential for applications that require efficient data storage, retrieval, and management, including websites, mobile apps, e-commerce systems, customer relationship management (CRM) software, and more.



