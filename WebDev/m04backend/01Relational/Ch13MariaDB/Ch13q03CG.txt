

**Filtering and Sorting Query Results:**
- How do you filter data in SQL queries?
- Explain the difference between WHERE and HAVING clauses.
- When would you use the ORDER BY clause?

**Distinct Keyword:**
- What does the DISTINCT keyword do in SQL?
- Can you provide an example of when you might use DISTINCT in a query?

**Limit and Offset:**
- What is the purpose of the LIMIT clause?
- How does the OFFSET clause work in SQL queries?

**Aggregation Functions (Count, Sum, Average, Max, Min):**
- Explain the difference between COUNT and COUNT(*) in SQL.
- When would you use SUM, AVG, MAX, and MIN functions in SQL queries?
- Can you give an example of using these functions in a query?

**Group By:**
- What does the GROUP BY clause do in SQL?
- How is the GROUP BY clause different from the WHERE clause?

**Multi-table queries with JOINs (Inner Join, Left Join, Right Join, Full Join, Cross Join):**
- Explain the difference between INNER JOIN and OUTER JOIN.
- When would you use LEFT JOIN, RIGHT JOIN, and FULL JOIN?
- What is a Cartesian Join and when might it be used?









1. **Filtering and Sorting Query Results:**
   - Data in SQL queries is filtered using the WHERE clause, which specifies conditions to select specific rows based on criteria. 
   - The WHERE clause filters rows before the results are grouped or aggregated. 
   - The ORDER BY clause is used to sort the result set either in ascending or descending order based on specified columns. It's used for arranging the output.



2. **Distinct Keyword:**
   - The DISTINCT keyword in SQL eliminates duplicate rows from the result set. It returns unique values for the specified columns in the SELECT statement.
   - Example: When retrieving a list of unique email addresses from a table to eliminate duplicate entries.




3. **Limit and Offset:**
   - The LIMIT clause restricts the number of rows returned in a query result.
   - OFFSET specifies the number of rows to skip before starting to return rows from the result set. Used together with LIMIT, it enables paginated results.




4. **Aggregation Functions (Count, Sum, Average, Max, Min):**
   - COUNT counts the number of rows in a result set. COUNT(*) counts all rows, while COUNT(column_name) counts non-null values in a specific column.
   - SUM calculates the total of numeric column values. 
   - AVG computes the average value of a numeric column. 
   - MAX finds the maximum value, and MIN finds the minimum value within a column.
   - Example: `SELECT COUNT(*), SUM(column_name), AVG(column_name), MAX(column_name), MIN(column_name) FROM table_name;`




5. **Group By:**
   - The GROUP BY clause is used to group rows that have the same values in specified columns.
   - It's used in conjunction with aggregate functions (like COUNT, SUM) to perform operations on each group separately.
   - Unlike the WHERE clause that filters individual rows, GROUP BY operates on grouped rows.





6. **Multi-table queries with JOINs (Inner Join, Left Join, Right Join, Full Join, Cross Join):**
   - INNER JOIN retrieves records with matching values in both tables based on a specified condition.
   - OUTER JOINs (LEFT, RIGHT, FULL) retrieve matching records along with unmatched records from one or both tables.
   - LEFT JOIN retrieves all records from the left table and matching records from the right table. RIGHT JOIN does the opposite.
   - FULL JOIN retrieves all records when there is a match in either the left or right table.
   - Cartesian Join (or Cross Join) produces the Cartesian product of the tables involved, matching every row from one table with every row from another.
   



  
