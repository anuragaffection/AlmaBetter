

1. **ACID Properties:**
   - What are the ACID properties in database transactions? Explain each one. (Q1)
   - How do ACID properties ensure transaction reliability? (Q2)
   - Can you give an example of a scenario where maintaining ACID properties is crucial? (Q3)




2. **Transaction State:**
   - Explain different transaction states in a database. (Q4)
   - How does a transaction move between different states? (Q5)
   - What is the significance of each transaction state? (Q6)




3. **Defining DB Transaction:**
   - Define a database transaction. (Q7)
   - Explain the components of a transaction. (Q8)
   - How does a transaction differ from a simple database operation? (Q9)




4. **Save Point:**
   - What is a save point in a database transaction? (Q10)
   - How is a save point useful in managing transactions? (Q11)
   - Provide an example scenario where a save point would be beneficial. (Q12)




1. **ER Model:**
   - What is an Entity-Relationship (ER) model? (Q13)
   - Explain the key components of an ER model. (Q14)
   - Why is the ER model important in database design? (Q15)




2. **ER Diagram Notations:**
   - Describe commonly used notations in an ER diagram. (Q16)
   - Explain the symbols used for entities, relationships, attributes, etc. (Q17)
   - How do these notations help in representing relationships between entities? (Q18)




3. **Cardinality:**
   - Define cardinality in the context of an ER diagram. (Q19)
   - Explain different types of cardinality (one-to-one, one-to-many, many-to-many). (Q20)
   - How is cardinality depicted in an ER diagram? (Q21)




4. **ER Diagram Implementation:**
   - Discuss the steps involved in implementing an ER diagram into a database schema. (Q22)
   - Explain the process of mapping an ER diagram to tables in a relational database. (Q23)
   - What challenges might arise during the implementation of an ER diagram? (Q24)








1. **ACID Properties:**


   - **Q1: What are the ACID properties in database transactions? Explain each one.**
     - **Atomicity:** Ensures that either all operations within a transaction succeed or none do.
     - **Consistency:** Maintains data integrity before and after the transaction.
     - **Isolation:** Ensures transactions are independent and don't impact each other's execution.
     - **Durability:** Guarantees committed transactions persist even in the event of a system failure.




   - **Q2: How do ACID properties ensure transaction reliability?**
     - ACID properties collectively ensure that transactions are reliable by maintaining data consistency, preventing data corruption, and allowing safe recovery after system failures.




   - **Q3: Can you give an example of a scenario where maintaining ACID properties is crucial?**
     - Consider a bank transaction where money is transferred between accounts. It's crucial that either the entire transfer happens successfully, deducting money from one account and adding it to another, or none of it happens to maintain consistency and prevent any loss of funds.








2. **Transaction State:**


   - **Q4: Explain different transaction states in a database.**
     - **Active:** The initial state when the transaction is executing.
     - **Partially Committed:** The phase after executing all operations but before final commitment.
     - **Committed:** The state after a successful transaction.
     - **Failed/Aborted:** The state when a transaction encounters an error or is intentionally rolled back.




   - **Q5: How does a transaction move between different states?**
     - Transactions progress through states based on successful execution or errors encountered during execution.




   - **Q6: What is the significance of each transaction state?**
     - Each state reflects a specific phase in the transaction lifecycle, ensuring data consistency, integrity, and the ability to recover from failures.








3. **Defining DB Transaction:**


   - **Q7: Define a database transaction.**
     - A database transaction is a logical unit of work that performs a series of operations on a database. It must be executed atomically and ensure data consistency.




   - **Q8: Explain the components of a transaction.**
     - Components include the beginning (start), a set of operations, and an end (commit or rollback).




   - **Q9: How does a transaction differ from a simple database operation?**
     - A transaction groups multiple database operations into a single unit, ensuring all operations either succeed together or fail together. A simple operation stands alone without this grouping.







4. **Save Point:**


   - **Q10: What is a save point in a database transaction?**
     - A save point marks a specific point within a transaction to which one can rollback if needed, without affecting the entire transaction.




   - **Q11: How is a save point useful in managing transactions?**
     - Save points allow for partial rollback, enabling reverting specific parts of a transaction without discarding the entire transaction's work.




   - **Q12: Provide an example scenario where a save point would be beneficial.**
     - In a multi-step booking process (flights, hotels, activities), if an error occurs during hotel reservation, a save point enables rolling back only the hotel booking part without canceling the entire trip booking.






5. **ER Model:**


   - **Q13: What is an Entity-Relationship (ER) model?**
     - An ER model is a visual representation that describes entities, their attributes, and the relationships among them within a database system.




   - **Q14: Explain the key components of an ER model.**
     - Components include entities, attributes, relationships, and cardinality.




   - **Q15: Why is the ER model important in database design?**
     - It helps in visualizing and designing the structure of a database, fostering better understanding and communication among stakeholders.









6. **ER Diagram Notations:**


   - **Q16: Describe commonly used notations in an ER diagram.**
     - Notations include 
       rectangles for entities, 
       ovals for attributes, 
       diamonds/lines for relationships, 
       underlining for primary keys, etc.




   - **Q17: Explain the symbols used for entities, relationships, attributes, etc.**
     - Entities represent real-world objects, 
       attributes describe properties of entities, 
       relationships show connections between entities, and 
       keys uniquely identify entities.




   - **Q18: How do these notations help in representing relationships between entities?**
     - They visually depict how entities are related, their attributes, and the cardinality of these relationships.








7. **Cardinality:**


   - **Q19: Define cardinality in the context of an ER diagram.**
     - Cardinality defines the relationships between entities and specifies the number of instances of one entity related to another entity.




   - **Q20: Explain different types of cardinality (one-to-one, one-to-many, many-to-many).**
     - One-to-One: Each instance of one entity relates to exactly one instance of another.
     - One-to-Many: One instance of an entity relates to multiple instances of another.
     - Many-to-Many: Multiple instances of one entity relate to multiple instances of another.




   - **Q21: How is cardinality depicted in an ER diagram?**
     - Cardinality is often represented using symbols near the relationship lines, indicating the nature and quantity of relationships between entities.







8. **ER Diagram Implementation:**


   - **Q22: Discuss the steps involved in implementing an ER diagram into a database schema.**
     - Steps include identifying entities and attributes, determining relationships and cardinality, normalization, and mapping to tables and columns.




   - **Q23: Explain the process of mapping an ER diagram to tables in a relational database.**
     - It involves converting entities to tables, attributes to columns, relationships to foreign keys, and ensuring data normalization and referential integrity.




   - **Q24: What challenges might arise during the implementation of an ER diagram?**
     - Challenges include ensuring proper normalization, handling complex relationships, maintaining performance, and handling changes in requirements while preserving the integrity of the database structure.


