HSBC



1 
Which HTTP method should be used for safe and idempotent read-only operations in a RESTful API?

POST
GET
PUT
DELETE







2
What is the purpose of React's forward refs feature?

It is used to pass props to child components.
It is used to create a reference to a DOM element or a child component.
It is used to share state between sibling components.
It is used to define the PropTypes of a component.







3 
Which communication protocol is commonly used for inter-service communication in microservices?

FTP
HTTP/HTTPS
SMTP
Telnet








4
What does the 'Event Loop' in Node.js do?

Manages database connections
Handles asynchronous operations and callbacks
Controls routing in Express.js
Performs DOM manipulation






5
What is the primary advantage of containerization technologies like Docker in a microservices environment?

Easier service discovery
Simplified inter-service communication
Improved scalability
Consistent deployment and isolation









6. What is the primary goal of versioning in API design?

To maintain a single API version indefinitely.
To ensure backward compatibility.
To discourage API usage.
To confuse API consumers.









7. Which of the following is NOT a RESTful constraint?

Statelessness
HATEOAS (Hypermedia as the Engine of Application State)
SOAP (Simple Object Access Protocol)
Resource Identification








8
What is the purpose of the 'util.promisify' function in Node.js?

To create custom utility functions
To convert callback-based functions into Promises
To format dates and times
To serialize JSON data





9
Which architectural pattern is often used to ensure data consistency across microservices?

Event Sourcing
Shared Database
Remote Procedure Call (RPC)
Monolithic Database









10
In React, what is the purpose of the dangerouslySetinnerHTML attribute?

It is used to set the component's inner text content.
It is used to insert raw HTML into a component, potentially introducing a security risk.
It is used to define inline styles for a component
It is used to create a new DOM element in React









11 
Which design principle encourages microservices to be small and focused on a single capability or function?

Service Abstraction
Code Duplication
Single Responsibility Principle
Monolithic Integration








12
Which of the following is a characteristic of a well-designed microservice?

Large codebase
High coupling with other services
Independent data storage
Tight integration with monolithic systems








13
What is the purpose of the shouldComponentUpdate lifecycle method in React?

It is used to determine if a component should re-render when its state or props change.
It is used to set the initial state of a component.
It is used to fetch data from an API.
It is used to force a re-render of a component.






14
What is the primary challenge of ensuring data consistency in a microservices architecture?

Use of distributed transactions
Event-driven architecture
Data replication
Isolation









15
What is a potential drawback of using microservices architecture?

Increased development speed
Complex inter-service communication
Reduced scalability
Simplified deployment








16
What is the purpose of the "Content Negotiation" mechanism in HTTP when designing APIs?

To determine the language in which the response should be provided.
To negotiate payment terms for API usage.
To choose the format or representation of the response data.
To decide whether an API request is authorized.








17
Which HTTP status code should be used when a resource is successfully created in a RESTful API?


200 OK
201 Created
204 No Content
202 Accepted







18
What is a 'callback hell' in Node.js?

A debugging tool for Node.js applications
A pattern used to manage callbacks in a clean and organized way
A situation where multiple nested callbacks make the code unreadable and hard to maintain
A popular Node.js library for managing asynchronous tasks







19. What is a 'closure' in the context of Node.js?

A mechanism for securely storing sensitive data
A function with access to its own scope, as well as the outer (enclosing) function's scope
A Node.js package manager
A design pattern for routing in Express.js









20
How do you connect a React component to the Redux store?

Use the connect function from the react-redux library.
Manually update the state in the component.
Use the useState hook from React.
Create a new Redux store instance in the component









21
What is the primary purpose of the 'Buffer' class in Node.js?

To read and write files
To parse JSON data
To handle binary data directly
To create custom JavaScript classes








22.
What is the role of the "Rate Limiting" in API design?

To make the API difficult to use.
To encourage API consumers to make as many requests as possible.
To prevent abuse and protect server resources.
To ensure that API endpoints are not versioned.










23
What is the purpose of the Redux store's dispatch method?

To create a new action
To update the state by applying a reducer
To subscribe to state changes
To initialize the store











24
In microservices, which authentication method is more challenging due to the stateless nature of services?

Token-based authentication
Basic authentication
Certificate-based authentication
OAuth







25
What is the purpose of the "idempotency" principle in API design?

To make the API endpoints as complex as possible.
To ensure that multiple identical requests have the same effect as a single request.
To increase the rate limits for API consumers.
To encourage clients to make non-GET requests.







26
What is the key difference between React. PureComponent and React.Component?

React PureComponent has a shouldComponentUpdate method, while React. Component does not.
React PureComponent only re-renders when state or props change, while React Component re-renders on any change.
React PureComponent is more performant in terms of re-rendering than React.Component
React PureComponent is a deprecated class in React.







27
What is the purpose of the context API in React?

To pass data down the component tree without explicitly passing props.
To create global variables that can be accessed from any component.
To manage the state of a component.
To handle routing in React applications.











28
Which middleware is commonly used in Redux for handling asynchronous actions?

Redux Logger
Redux Thunk
Redux Saga
Redux DevTools















29
What is the role of an API Gateway in a microservices architecture?

Load balancing
Service orchestration
Service discovery
Caching


















30
In Redux, what is the purpose of a reducer?

To define the action creators
To update the state based on dispatched actions
To define the store's initial state
To create middleware for async actions








Answer


01.
GET

The GET method is used for safe and idempotent read-only operations in a RESTful API. It is intended for retrieving data without causing any side effects on the server.





02.
It is used to create a reference to a DOM element or a child component.

Forward refs allow a parent component to access the DOM element or a child component's instance. It's often used for managing focus, triggering imperative animations, or interacting with third-party libraries.






03.
HTTP/HTTPS

HTTP/HTTPS is commonly used for inter-service communication in microservices due to its widespread support for RESTful APIs.






04.
Handles asynchronous operations and callbacks

The Event Loop in Node.js is responsible for managing asynchronous operations and callbacks. It ensures that non-blocking I/O operations are processed efficiently.







05.
Consistent deployment and isolation

Containerization technologies like Docker provide consistent deployment environments and isolation for microservices, which helps in managing complex architectures.







06.
To ensure backward compatibility.

Versioning in API design is essential to maintain backward compatibility with existing clients while introducing changes or updates to the API. This helps prevent breaking existing client applications and ensures a smoother transition to new versions.







07.
SOAP (Simple Object Access Protocol)

SOAP is not a RESTful constraint; it's a different protocol for building web services. The other options (A, B, D) are principles and constraints associated with RESTful APIs.









08.
To convert callback-based functions into Promises

The 'util.promisify' function in Node.js is used to convert functions that use callbacks into functions that return Promises, making it easier to work with asynchronous code.







09.
Event Sourcing

Event Sourcing is a technique used to maintain data consistency in a microservices environment by storing all changes as a sequence of events.








10.
It is used to insert raw HTML into a component, potentially introducing a security risk.

dangerouslySetInnerHTML allows you to inject HTML directly into a component, but it should be used with caution as it can expose your application to cross-site scripting (XSS) attacks.







11.
Single Responsibility Principle

The Single Responsibility Principle suggests that microservices should have a single, well-defined responsibility or function.






12.
Independent data storage

Well-designed microservices have independent data storage to avoid data coupling and maintain encapsulation.







13.
It is used to determine if a component should re-render when its state or props change.

The shouldComponentUpdate method is called before a component re-renders and allows you to control whether the component should re-render based on the changes in its state or props. This can be used for performance optimization.






14.
Use of distributed transactions

Ensuring data consistency in a microservices architecture can be challenging due to the avoidance of distributed transactions, which can lead to eventual consistency problems.






15.
Complex inter-service communication

Microservices can introduce complexity in inter-service communication, as services need to interact with each other through APIs, which can be challenging to manage.









16.
To choose the format or representation of the response data.

Content Negotiation allows clients and servers to agree on the format (e.g., JSON, XML, HTML) of the response data, ensuring that clients receive the data in a format they can process.









17.
201 Created

HTTP status code 201 indicates that a new resource has been successfully created in the API. It is the appropriate status code to use in this context.






18.
A situation where multiple nested callbacks make the code unreadable and hard to maintain

Callback hell refers to the problem of having too many nested callbacks in your code, making it difficult to read and maintain. This issue can be mitigated using techniques like Promises or async/await.








19.
A function with access to its own scope, as well as the outer (enclosing) function's scope

In Node.js and JavaScript, a closure is a function that has access to its own scope and the outer function's scope. This allows variables from the outer function to be accessible within the inner function.





20.
Use the connect function from the react-redux library.

The connect function is used to connect a React component to the Redux store, allowing the component to access the store's state and dispatch actions.



21.
To handle binary data directly

The 'Buffer' class in Node.js is used to work with binary data directly, allowing you to read, write, and manipulate raw data.








22.
To prevent abuse and protect server resources.

Rate limiting is used to restrict the number of API requests made by a client within a specific time frame to prevent abuse, protect server resources, and maintain service availability.








23.
To update the state by applying a reducer

The dispatch method is used to send an action to the Redux store, which in turn triggers the application of reducers to update the state.






24.
Token-based authentication

Token-based authentication can be more challenging in microservices because it requires managing and validating tokens without a shared session state.







25.
To ensure that multiple identical requests have the same effect as a single request.

Idempotency in API design means that making the same request multiple times should have the same effect as making it once. This is important for ensuring predictable and safe behavior, especially for operations that may be retried.




26.
React.PureComponent only re-renders when state or props change, while React.Component re-renders on any change.

React.PureComponent performs a shallow comparison of props and state to determine whether a re-render is necessary, whereas React.Component re-renders whenever setState is called or when new props are received.






27.
To pass data down the component tree without explicitly passing props.

The context API in React allows you to pass data through the component tree without having to pass props manually at every level, making it useful for situations where data needs to be accessible by multiple components without going through intermediate components.







28.
Redux Thunk

Redux Thunk is a popular middleware for handling asynchronous actions in Redux, allowing you to dispatch functions instead of plain action objects.







29.
Service orchestration

An API Gateway can perform service orchestration by routing requests to the appropriate microservices and managing the flow of requests and responses.





30.
To update the state based on dispatched actions

A reducer is a pure function that takes the current state and an action as arguments and returns the new state based on the action's type.






