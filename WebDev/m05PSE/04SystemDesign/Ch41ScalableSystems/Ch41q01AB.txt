Scalable System



01.
What are some common patterns for communication between microservices?]]]

RESTful API
Messaging
Both a and b
None of the above







02.
Which of the following is a best practice for implementing caching in applications that need to scale?

Caching all data at once to improve performance
Using a shared cache across all application instances
Implementing a distributed cache to minimize performance issues
Not using caching at all to simplify architecture







03.
What is technical debt in the context of building applications on scale?

The cost of cloud infrastructure
The cost of maintaining application security
The cost of maintaining high availability
The cost of fixing code that was rushed or poorly designed







04.
Which of the following is a characteristic of a horizontally scalable application?

It is able to handle a large number of concurrent connections on a single server
It is able to handle a large number of requests by adding more servers to the pool
It is able to handle a large amount of data by adding more storage capacity to a single server
It is able to handle a large amount of traffic by optimizing code for performance







05.
What is auto-scaling?

A technique for load balancing
A feature of cloud infrastructure
A security best practice
None of the above








06.
Which of the following is a best practice for designing applications that can scale to meet demand?

Using a single server
Limiting the use of cloud infrastructure
Optimizing performance
Ensuring low availability








07.
What is the difference between a service registry and a service discovery?

A service registry keeps track of all microservices, while service discovery helps clients find the correct microservice.
A service registry helps clients find the correct microservice, while service discovery keeps track of all microservices.
Both are the same thing.
None of the above








08.
What is a microservices architecture?

An architecture that uses small, independent services
An architecture that uses a monolithic codebase
An architecture that runs on a single server
None of the above








09.]]]
Which of the following techniques is commonly used to ensure an application can handle spikes in traffic and usage?

Distributed architecture
Manual scaling
Load testing
Single server setup








10.
Which of the following is a key benefit of leveraging cloud infrastructure when building applications on scale?

Increased complexity
Higher costs
Improved scalability
Reduced availability









Answer

01.
Both a and b

Both a and b. In a microservices architecture, it is common to use both RESTful API and messaging patterns for communication between microservices. RESTful API allows services to communicate over HTTP using standardized request and response structures.




02.]]]
Implementing a distributed cache to minimize performance issues

Implementing a distributed cache to minimize performance issues. A distributed cache allows for caching data across multiple instances, minimizing performance issues and improving application scalability.




03.
The cost of fixing code that was rushed or poorly designed

The cost of fixing code that was rushed or poorly designed. Technical debt refers to the long-term costs associated with taking shortcuts or making sacrifices in the short- term to deliver an application on time. This can include costs associated with maintaining or fixing poorly designed code.




04.
It is able to handle a large number of requests by adding more servers to the pool

It is able to handle a large number of requests by adding more servers to the pool. Horizontally scalable applications are able to handle more requests by adding more servers to the pool, rather than relying on a single server to handle all requests.





05.
A feature of cloud infrastructure

A feature of cloud infrastructure. Auto- scaling is a feature provided by cloud providers like AWS or Azure, which automatically adjusts the resources allocated to an application based on demand.




06.
Optimizing performance

Optimizing performance. Applications that can scale to meet demand need to be designed with performance in mind, including minimizing latency and improving page load times.





07.
A service registry keeps track of all microservices, while service discovery helps clients find the correct microservice.]]

A service registry keeps track of all microservices, while service discovery helps clients find the correct microservice. A service registry acts as a centralized repository that maintains information about all registered microservices and their network locations.





08.
An architecture that uses small, independent services

An architecture that uses small, independent services. A microservices architecture breaks down an application into smaller, independent services that can be developed and deployed separately, which can improve scalability and reduce complexity.





09.]]]
Load testing

Load testing. Load testing is a technique used to simulate high traffic and usage scenarios to ensure an application can handle spikes in traffic and usage. This helps identify any bottlenecks or performance issues that may impact the application's ability to scale.





10.
Improved scalability

Improved scalability. Cloud infrastructure offers auto-scaling, load balancing, and other built-in services that make it easier to scale applications as needed.






