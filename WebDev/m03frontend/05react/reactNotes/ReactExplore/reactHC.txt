React by Hitesh Chaudhary 




01. Roadmap {

    - Phantom message problem 
    - ghost message problem

    - state = store value 
    - state = a variable 

    - bind
    - call
    - apply 
    - Dom Manipulation 

    - babel 
    - fibre 
    - diffing alogrithm 
    - hydration 

    - react is a library 

    - library   = more freedom 
    - framework = strict & less freedom

    - JSX 
    - components 
    - state 
    - props 
    - Hooks

    - SPA = single page application 
    - MPA = Multiple page appliaton 

    - React Router DOM = a library to maintain routing 

    - Redux          = a library to manage state 
    - Redux toolkit  = a library to manage state 
    - Zustand        = a library to manage state 
    - context api    = a library to manage state 

    - BAAS = backend as a service 
    - BAAS = appwrite, firebase, superbase 

    - freeapi.app 

    - NextJs = framework built on react 
    - Remix  = framework built on react 
    - Gatsby = framework built on react 
}







02. project & installation  {

    - Vs code installation
    - Node js installation

    - https://react.dev/learn

    - github 
    - git installation
    - git init 
    - git add 
    - git commit 
    - git push 
    - git branch 

    - node -v = to check node version 

    - vite   = a bundler
    - parcel = a bundler
    - babel  = a bundler

    - react        = core library 
    - react-dom    = library for web apps 
    - react-native = library for mobile apps 

    - npx = node package executor 
    - npm = node package manager 

    - create-react-app myApp = way to create react app 
    - create-react-app       = is bulky 

    - package.json  = dependencies  
    - jest          = testing library
    - react-scripts = 
    - web-vitals    = check performance 
    - scripts       = 

    - start = 
    - build = 
    - test  = 
    - eject = 

    - eslintConfig = 
    - browswerlist = which browser it is supporting 

    - cd 
    - npm run start 
    - npm start 
    - npm run build 

    - build = convert react file to javascript file 

    - npx create-react-app myApp 

    - npm create vite@latest 
    - npm install = installing node module 
    - npm run dev = running the dev server 

    - project cleaning 

}








03. flow & Structure {

    - npx create-react-app 
    - npm create vite@latest 

    - manifest.json = for mobile 
    - package-lock.json = locking for certain devices 

    - Keep components name - capital 
    - export default 
    - .js 
    - .jsx 
    - fragment return 
    - single div return 

    - render()
    - return()
    - return{}

    - react-scripts = used to inject js file 
    - 

}






04. Custom React & JSX {

    - setAttribute()
    - appenChild()
    - querySelector()
    - querySelectorAll()
    - createElement()
    - innerHTML 

    - React.createElement()
    - {} = enject variable in jsx 
    - {} = enject final output 
    - {} = can not write loop, if, switch etc within it 
    - {} = evaluated expression 
    - 
}







05. Hooks {

    - useState()
    - import React, { useState } from 'react';
    - const [state, setState] = useState(initialValue);

    - useState(), takes some initial value 
    - useState(), returns an array 

    - state ,    a returned variable ,  current state 
    - setState , a returned function ,  used to update the state
    - setState , completely replace the previous state
    - setState , re - render the components 
    - setState , have callback to update previous value

    - state, setState = we are free to use any other names 

}






06. Virtual DOM, fiber & Reconcilliation {

    - createRoot()

    - react-fiber-architecture
    - https://github.com/acdlite/react-fiber-architecture

    - Reconcilliation vs Render 
    - is Virtual DOM still in use 
}






07. Tailwind & Props {

    - https://vitejs.dev/
    - https://vitejs.dev/guide/

    - npm install -D tailwindcss postcss autoprefixer
    - npx tailwindcss init -p

    - D , where to include in package.json [dev dependencies]
    - npx tailwindcss init -p = generate tailwind.config.js file 

    - className 
    - htmlfor 

    - props passing & receiving 
}





08. Interview Questions {
    - useState
    - current value 
    - previous value
    - Multiple calling of , setState 
}





09. React project {
    - simple background changer project 

    - onClick = {someFunction}
    - onClick = {someFunction()}

    - what is difference between using someFunction & someFunction()

    - someFunction = will give function to onClick
    - someFunction() = will give value returned by someFunction to onClick
}



10. useEffect, useRef, useCallback {
    - useCallback()
    - useEffect()
    - useRef()

    - useCallback(), used for optimize, memoize 
    - useEffect(), used to call, if any dependencies change 
    - useRef, store reference 

}




11. Custom Hooks {
    -- useId 
    -- useEffect
    -- component reusing 
}



12. Router {
    -- third party library
    -- react-router-dom 
    -- https://reactrouter.com/en/main

    -- Link 
    -- NavLink 
    -- 

    -- Link vs a 
    -- Link,  replacing anchor tag, a 

    -- Link vs NavLink
    -- NavLink as extra feature 
    -- provide isActive, isPending 
    -- 

    -- RouterProvider 
    -- RouterProvider,  takes props 

    -- createBrowserRouter, 
    -- Outlet, it changes 

    -- createRoutesFromChildren
    -- createRoutesFromElements 


    -- Route, 
    -- Link 
    -- NavLink
    -- RouterProvider, 
    -- createBrowserRouter, 
    -- createRoutesFromElements 
    -- useLoaderData()
    -- useParams()
}




#13 context api {
    -- context api 
    -- redux 
    -- react-redux 
    -- react-toolkit (RTK)
    -- Zustand

    -- above all 5 are state management 
    -- https://react.dev/reference/react/useContext

    -- themeSwitcher Project 
    -- 
}


#14 context api  {
    -- todo app 
    -- local storage 
    
}


#15 redux {
    -- flux 
    -- redux
    -- react-redux
    -- reduxToolkit

    -- redux-thuk
    -- redux-saga 
    
    -- store
    -- reducers

    -- useSelector
    -- useDispatch 

}



#16 {
    
}