
01. What is Git & Github ?
   --- Git is a distributed version control system that tracks changes in files.
   --- GitHub is a web-based platform that hosts Git repositories, 
       enabling collaboration, code sharing, and version control management.




02. What is version control ?
   --- Ways to maintain & control the different or multiple versions of an application.
   --- Makes it easy to collaborate.
   --- It maintains the previous version of the application.
   --- Keeps track of changes in the application.




03. Different types of Version Control System
   --- Localized VC
   --- Centralized VC
   --- Distributed VC




04. Localized version control
   --- Everything is happening on local or my computers.
   --- Changes of data loss are high: hardware crash, power failure.



05. Centralized version control
   --- Here we have a centralized server or server to store versions.
   --- Data loss chance is less compared to localized VC.
   --- A single failure will affect many systems.




06. Distributed Version Control
   --- No single point of failure of versions.
   --- Here, we have a centralized server + each individual has a copy of the version.




07. Version control tool
   --- Tool to manage the version of the application.
   --- E.g., git




08. Git
   --- It is a distributed version control system tool.




09. Git Snapshot
   --- State of the project or code at a specific moment or time.
   --- Every commit has a new snapshot.





10. Git states
   --- Modified - state when we make a change to a file.
   --- Staged - state when Git starts to track the code.
   --- Committed - file called to commit the changes.






11. Git Local
   --- Installing Git.
   --- Configuring Git.
   --- Create Git project.
   --- Git Operations.






12. Installing Git
   git download link: https://git-scm.com/downloads
   --- git --version === to check whether Git is installed or not.
   --- git version === to check whether Git is installed or not.







13. Configuring Git - to log in or sign up, who is the users
   --- git config --global user.email " your email "  === to assign email.
   --- git config --global user.name " Your Name "    === to assign name.
   --- git config user.email                          === to check email.
   --- git config user.name                           === to check name.






14. Some basic Windows command
   --- cd <folderName>       === to move to the next folder.
   --- cd ..                 === to go back to the previous folder.
   --- q                     === to quit from the command line or terminal.
   --- dir                   === to display all directories or folders (in Windows)
   --- dir/w
   --- dir/p 
   --- dir/b 
   --- dir/s 
   --- mkdir <folderName >   === to create a folder.
   --- pwd                   === present working directory.
   --- touch <fileName>      === to create a file (in Mac only - check).
   --- ls -a                 === how many files in the folder (in Mac only - check).
   --- Notepad <fileName >   === to create a text file.
   --- Notepad <fileName >   === to display what is written inside the file.
   --- cat <fileName>        === to display what is written within the file.
   --- clear                 === will clear all in terminal.






15. Git operations
   --- git init                 === to initialize Git in a folder.
   --- git status               === to show the status of the file.
   --- git add .                === add all files in Git.
   --- git add <fileName>       === add only one with fileName.
   --- git commit -m "message"  === to commit the code.
   --- git log                  === to see all the commit + head or recent commit.

   --- git branch                   === to check on which branch we are working.
   --- git branch <branchName>      === to create a new branch.
   --- git checkout <branchName>    === to switch a new branch.
   --- git checkout -b <branchName> === to switch & create a new branch.
   --- git branch -m <ReBranchName> === to rename the current branch.
   --- git branch -d <branchName>   === to delete the branch.
   --- git branch -a                === display all branches.
   --- git switch <branchName>      === to switch branches.

   --- git restore <fileName>          === to restore previous changes in a file.
   --- git restore --staged <fileName> === to restore from an added file in Git.
   --- git reset --soft HEAD~1         === to restore from a committed file in Git.
   --- git reset --hard HEAD~1         === to restore from a committed file + it will change the head.
   --- git stash apply                 === to restore from a committed file.
   ---                                 === to restore form pushed file 







16. Merging Branches {

    git merge <newBranchName> 
    -- will merge new branch to main or current branch

    
}




17 Merge conflict {
    -- 
}