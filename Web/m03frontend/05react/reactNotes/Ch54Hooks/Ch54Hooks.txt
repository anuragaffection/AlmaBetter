Life Cycle Method & React Hooks


01. Components Lifecycle (
    -- React component
)


02. Components LifeCycle Methods (
    -- constructor()
    -- render ()
    -- componentDidMount()
    -- componentDidUpdate()
    -- componentWillUnmount()
    -- componentDidCatch()
)


03. React Hooks {
    -- Why we need hooks 
    -- How hooks works 
}


04. useState() {
    -- import 
    -- syntax 
}


05. useEffect() {
    -- import
    -- syntax
}


06. useContext() {
    -- import 
    -- syntax
}


07. useCallback() {
    -- import
    -- syntax
}


------------------------------------
------------------------------------


Pre-defined Methods

--- constructor()
--- super()]]]
--- state
--- setState
--- props
--- render()

--- constructor(props)
--- super(props)

--- hasError
--- ErrorBoundary 

--- componentDidMount()
--- componentDidUpdate()
--- componentWillUnmount()
--- componentDidCatch()
--- componentDidCatch(error, errorInfo)

--- shouldComponentUpdate()
--- getDerivedFromProps()
--- getSnapshotBeforeUpdate()

--- useState()
--- useEffect()
--- useContext()
--- useCallback()
--- useRef()
--- useMemo()


Recall 
--- appendChild()
--- querySelector()

--- createContext()
--- createElemnt()
--- addEventListener()
--- removeListener()


Returning 
--- jsx
--- array
--- fragments 


Explore 
-- React.Component
-- React.Fragment
-- React.Create 
-- 


------------------------------------
------------------------------------



01. Components Lifecycle {

    three stages 
    - mounting, 
    - updating, 
    - unmounting,
    
}





02. Components LifeCycle Methods (

    -- constructor() {
        first method to call in life cycle 
        state initialize
        bind of event handlers 
    }


    -- render () {
        called after    = constructor()
        used to #return =  in class component
        React.Fragment  =  pre defined 
    }


    -- componentDidMount() {
        called after  = render ()
        mounting phase 
    }


    -- componentDidUpdate() {
        change in props or update in props = re-render the Components
        change in state or update in state = re-render the component
        recieve two arguments : prevProps and prevState
    }

    -- componentWillUnmount() {
        cleaning timers, cancelling network requests, cleaning subscriptions 
    }

    -- componentDidCatch() {
        called, when error is thrown by child component
        it takes two parameters 
        syntax = componentDidCatch(error, errorInfo)
        error = it is an object 
        errorInfo = a string & error message 
    }

    Notes {
        -- what is replacements of componentDidCatch in Hooks
    }
)





03. React Hooks {
    -- after react 16.8 version 
    -- Why we need hooks (
        -- allow functional component to have state 
        -- use to perform side effect 
    )
    -- How hooks works 
}




04. useState() {
    -- import 
    -- syntax 
    -- to store data & update data 
    -- to use state 
    -- replacements of ( state & setState from class component)
    -- returns array containing  current state and function to update the state 
    -- returns array containing [state, setState]
    -- setState , take previousState as callback
    -- setState, re-render the components 
}




05. useEffect() {
    -- import
    -- syntax = useEffect(effectFunction, dependencies);
    -- The useEffect hook also return a cleanup function
    -- to fetch data 
    -- to manage component life cycle 
    -- replacements of ( )

    note 
    -- When using the useEffect hook, it's important to handle any asynchronous operations properly and manage dependencies correctly to avoid potential issues like memory leaks or infinite loops.
}





06. useContext() {
    -- import 
    -- syntax
    -- createContext
    -- global state management 

    steps 
    -- context creation 
    -- providing value 
    -- consuming value 

    implementation 
    -- https://github.com/anuragaffection/blog_mern_frontend/tree/master/src/context
    -- https://github.com/anuragaffection/movie_critic/tree/master/frontend/src/context
}





07. useCallback() ]]]{
    -- import
    -- syntax
    -- memoize function 
}


